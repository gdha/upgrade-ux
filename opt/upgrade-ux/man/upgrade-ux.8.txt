= upgrade-ux(8)
:version: v1.1
:date: 23 October 2018
:data-uri:
:author: Gratien Dhaese
:doctype: manpage
:lang: en
:quirks:

== NAME
upgrade-ux - a framework to update or patch a Unix system (Linux, HP-UX and Solaris)

== SYNOPSIS
*upgrade-ux* [*-dDsSpFvV*] [*-c DIR*] _COMMAND_ [-- _ARGS_...]

== DESCRIPTION
Upgrade-ux is an Open Source upgrade framework to make patching and upgrades easy and repeatable.

Extending upgrade-ux is made possible by its modular framework.
Consistent logging and optionally extended output help understand the concepts
behind Upgrade-ux and help debug during development.

Upgrade-ux comes with ABSOLUTELY NO WARRANTY; for details see
the GNU General Public License at: https://www.gnu.org/licenses/gpl.html

== OPTIONS

=== GLOBAL OPTIONS

-c DIR::
    alternative config directory; instead of /etc/opt/upgrade-ux

-p::
    *preview mode* (we will not remove or install, update any software on this system)
    A preview will be forced by *upgrade-ux* before we can start an upgrade for real!

-d::
    *debug mode* (log debug messages to log file)

-D::
    *debugscript mode* (log every function call)

-s::
    *simulation mode* (show what scripts rear would include)

-S::
    *step-by-step mode* (acknowledge each script individually)

-F::
    *forced* continuation during preview or upgrade mode when check_patches returns errors

-v::
    *verbose output* (show progress output)

-V::
    version information

=== COMMANDS

*dump*::
    dump configuration and system information; please run this to verify
    your setup

*help*::
    print full list of commands and options

*purgelogs*::
    remove log files older then 30 days

*mkdist*::
    creates a tar archive of upgrade-ux

*test*::
    a simple test flow (stale NFS test)

*upgrade*::
    the default command (when no command given) which will launch the upgrade/update/patch procedure

// Use 'upgrade-ux -v help' for more advanced commands.

== CONFIGURATION

There are several configuration files available under (*/etc/opt/upgrade-ux/*):

*default.conf*::
    the default configuration file which defines parameters and variables. You should not change anything in here. If you need to modify a parameter then copy that line into the *local.conf* file.

*local.conf*::
    the local configuration file meant for the end-user. Remember, configuration files should be treated as shell scripts.

*HP-UX.conf*::
    parameters and settings only read by HP-UX systems

*SunOS.conf*::
    parameters and settings only read by Solaris systems

*GNU/Linux.conf*::
    parameters and settings only read by GNU/Linux systems

*exclude.packages*::
    the file to add packages which need to be excluded from updating

You have the choice to create additional configuration files if required. Use the *upgrade-ux dump* and check the _configuration tree_ section to have a complete overview of all configuration files searched for (it is OK if these do not exist).

A typical variable might be the +YEAR+ setting to define from which year (instead of the default *$(date +%Y)* [current year]) we want to install the patch bundles. 


== INI FILES

Each Unix Operating System requires an _INI_ file which contains the sections the upgrade procedure will follow in sequence.
The name of such _INI_ file is build as follow:

*/etc/opt/upgrade-ux/$OS-$OS_VERSION-$YEAR.ini*

The _INI_ file is build out of sections (a section can be empty):

*[preremove]*::
    Add here any specific command to remove specific software bundles before starting the upgrade, e.g. if some software cannot be upgrade and should be re-installed

    command[0] = (command)
    options[0] = (options for above command)
    bundle[0]  = (which software to remove)
    version[0] = (specific version of above software bundle to be removed)

    command[1] = (command)
    ...

*[preinstall]*::
    Add here any specific command you want to run

    command[0] = (command)
    options[0] = (options for above command)

*[install]*::
    Add here all commands required to install, upgrade or patch our systems. Use the syntax:

    command[0] = (command)
    options[0] = (options for above command)
    source[0]  = (location of the software depot)
    bundle[0]  = (which software to install, update)
    version[0] = (specific version of above software bundle to be installed or updated)

*[postinstall]*::
    Add here all commands required to install additional software packages. Use the same syntax as for [install]

*[postremove]*::
    Add here commands to remove something that could not be prevented by [install]. Syntax is the same as with [preremove]

*[configure]*::
    Add here commands to configure something special such as cron entries. Use same syntax as [preinstall]

*[cleanup]*::
    Add here commands to cleanup, if required. Most likely it will be empty

*[postexecute]*::
    Add here commands to run some special, such as *cfg2html* (as an example)

    command[0] = "/opt/cfg2html/bin/cfg2html"
    options[0] = "-2%Y%m%d"

== EXIT STATUS
0::
    Successful program execution.
>0::
    Usage, syntax or execution errors. Check the log file in
    _/var/opt/upgrade-ux/log/_ for more information.

== FILES
/opt/upgrade-ux/bin/upgrade-ux::
The program itself.

/etc/opt/upgrade-ux/default.conf::
The default configuration file.

/etc/opt/upgrade-ux/local.conf::
System specific configuration can be set here.

/etc/opt/upgrade-ux/exclude.packages::
File contains packages to exclude from updating (one per line).

/var/opt/upgrade-ux/::
Directory which contains all timestamped directories and log directory.

/var/opt/upgrade-ux/status::
File containing time stamps when all sections were executed (as upgrade-ux may be restarted after a reboot and will continue where it was interrupted). For example,

    2014-05-27 09:35:00 postexecute:ended
    2014-05-27 09:35:00 preview:ended   (preview ended successfully)
    

/var/opt/upgrade-ux/<YYYY-MM-DD>/::
Evidence files collected during _prep_ phase (the _before_ files) and _postinstall_ phase (the _after_ files) are stored under this directory.

/var/opt/upgrade-ux/log/::
Directory containing all log files of each upgrade-ux run with timestamps

/tmp/upgrade-ux.xxx::
Upgrade-ux working directory. By default it is removed after each run. If upgrade-ux exits with an error you probably need to remove this directory ny hand. In debugging mode the directory will not be removed as aid in helping to debug this software.

/opt/upgrade-ux/scripts::
Each section will have its own directory (with the name of a section) under this directory. Under each section directory you will find sub-directories with $OS_VENDOR name. Finally, under the $OS_VENDOR directories you will find scripts (without the she-bang!) that will be executed according the flow of the script. To honor the sequence use a prefix number. To see all scripts to be executed use the simulate option:

    # /opt/upgrade-ux/bin/upgrade-ux -s
    upgrade-ux 0.1 / Git
    Using log file: /var/opt/upgrade-ux/log/upgrade-ux-20140506-1037-hostname.log
    Source init/default/03_prepare_tmp_build_area.sh
    Source init/default/05_select_ini_file.sh
    Source init/default/10_check_current_status.sh
    ...

To run +upgrade-ux+ in _preview_ mode use the +-p+ flag:

    # /opt/upgrade-ux/bin/upgrade-ux -vp

To run +upgrade-ux+ in _upgrade_ mode then do _not_ use the +-p+ flag:

    # /opt/upgrade-ux/bin/upgrade-ux -v


== BUGS
Feedback is welcome, please report any issues or improvements to our issue-tracker at: https://github.com/gdha/upgrade-ux/issues
Furthermore, we welcome pull requests via GitHub.

Be aware, that upgrade-ux is only fully developed on RHEL based Linux systems and HP-UX systems. For other GNU/Linux variants please
create an issue with your wishlist. However, new development will only be carried out via sponsoring!

== COPYRIGHT
(c) 2014 - 2022

Gratien Dhaese

Upgrade-ux comes with ABSOLUTELY NO WARRANTY; for details see the GNU General Public License at
https://www.gnu.org/licenses/gpl.html

