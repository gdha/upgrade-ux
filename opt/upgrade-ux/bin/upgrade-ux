#!/bin/ksh
# $Id$
#
# upgrade-ux
#
#    upgrade-ux is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 3.

#    upgrade-ux is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with upgrade-ux; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# Authors:
# Gratien D'haese  <gratien dot dhaese at gmail dot com> [GD]

# Versioning
PRODUCT="upgrade-ux"
PROGRAM=${0##*/}
PRGDIR=${0%/*}
VERSION=1.27
RELEASE_DATE=24-Aug-2022
STARTTIME=$SECONDS

# define PATH (required for SunOS)
PATH=/usr/xpg4/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:$PATH

# Allow workflows to set the exit code to a different value.
EXIT_CODE=0

TOP_DIR="/opt/$PRODUCT"

# Find out if we're running from checkout
# DIR_PREFIX setting
if [[ $PRGDIR != /* ]]; then
    DIR_PREFIX=$(pwd)    # Acquire absolute path to the script
    DIR_PREFIX="$DIR_PREFIX/$PRGDIR"
else
    DIR_PREFIX=$PRGDIR
fi
# DIR_PREFIX can be very complex - to simplify we do the following trick
cd $DIR_PREFIX
DIR_PREFIX=$( pwd | sed -e "s#"${TOP_DIR}/bin$"##" )
cd - >/dev/null

##########################################
# Program directories - they must be set here. Everything else is then dynamic
BIN_DIR="${DIR_PREFIX}${TOP_DIR}/bin"
LIB_DIR="${DIR_PREFIX}${TOP_DIR}/lib"
SHARE_DIR="${DIR_PREFIX}${TOP_DIR}/scripts"
ETC_DIR="${DIR_PREFIX}/etc${TOP_DIR}"
VAR_DIR="${DIR_PREFIX}/var${TOP_DIR}"
LOG_DIR="${VAR_DIR}/log"
##########################################


# initialize defaults
STEPBYSTEP=
SIMULATE=
VERBOSE=
DEBUG=
KEEP_BUILD_DIR=
# treat the three next variables as numeric when testing - if (( PREVIEW ))
PREVIEW=0
FORCED=0
DOCKER=0

CMD_OPTS="$*"

while getopts "c:dDhsSpFvV" opt; do
    case "$opt" in
       (h) WORKFLOW="help";;
       (V) echo "$PRODUCT $VERSION / $RELEASE_DATE"; exit 0;;
       (v) VERBOSE=1;;
       (c) ETC_DIR="$OPTARG" ;;
       (d) DEBUG=1; VERBOSE=1;;
       (D) DEBUGSCRIPTS=1;;
       (s) SIMULATE=1; VERBOSE=1;;
       (S) STEPBYSTEP=1;;
       (p) PREVIEW=1;;
       (F) FORCED=1;;
       (*) WORKFLOW="help";;
    esac
done
shift $(( OPTIND - 1 ))

# set workflow to first command line argument or to usage
if [[ -z "$WORKFLOW" ]]; then
    if [[ ! -z "$1" ]]; then
       WORKFLOW=$1 ; shift # not "$1" to get rid of compound commands
    else
       #WORKFLOW=help
       WORKFLOW=upgrade
    fi
fi

# keep the remaining command line arguments to feed to the workflow
set -A ARGS "$@"

# the following workflows are always verbose
case "$WORKFLOW" in
    (dump|shell)
       VERBOSE=1
    ;;
esac

# are we root ?
if [[ "$(id -u)" != "0" ]]; then
    echo "ERROR: $PRODUCT needs ROOT privileges!" >&2
    exit 1
fi

# set some bash options
#shopt -s nullglob extglob
#hash -r

# make sure that we use only english
export LC_CTYPE=C LC_ALL=C LANG=C

# include default config
if [[ -f $ETC_DIR/default.conf ]]; then
    . $ETC_DIR/default.conf
fi

# include functions
for script in $LIB_DIR/*.sh ; do
    . $script
done

mkdir -p $LOG_DIR
exec 2>"$LOGFILE" || echo "ERROR: Could not create $LOGFILE" >&2

### lock functionality ###
if [[ "$WORKFLOW" != "help" && "$WORKFLOW" != "dump" ]]; then
    AcquireLock
fi

case "$WORKFLOW" in
    (help) ;;
    (*)
       LogPrint "$PRODUCT $VERSION / $RELEASE_DATE"
       Log "Command line options: $0 ${CMD_OPTS[@]}"
       if (( VERBOSE )); then
          LogPrint "Using log file: $LOGFILE"
       fi
       ;;
esac

v=""
verbose=""
# enable progress subsystem only in verbose mode, set some stuff that others can use
if (( "$VERBOSE" )); then
    v="-v"
    verbose="--verbose"
fi

# enable debug output of the progress pipe
if (( "$DEBUG" )); then
    KEEP_BUILD_DIR=1
fi



# All workflows need to read the configurations first.
# Combine configuration files
Debug "Combining configuration files"
Source "$ETC_DIR/$WORKFLOW.conf"
SetOSVendorAndVersion
# distribution configuration files
for config in "$ARCH" "$OS" \
    "$OS_MASTER_VENDOR" "$OS_MASTER_VENDOR_ARCH" "$OS_MASTER_VENDOR_VERSION" "$OS_MASTER_VENDOR_VERSION_ARCH" \
    "$OS_VENDOR" "$OS_VENDOR_ARCH" "$OS_VENDOR_VERSION" "$OS_VENDOR_VERSION_ARCH" ; do
    if [[ ! -z "$config" ]]; then
        Source "$ETC_DIR/$config.conf"
    fi
done
# user configuration files, last thing is to overwrite variables 
for config in local ; do
    Source "$ETC_DIR/$config.conf"
done


VERSION_INFO="
$PRODUCT $VERSION / $RELEASE_DATE

$PRODUCT comes with ABSOLUTELY NO WARRANTY; for details see
the GNU General Public License at: http://www.gnu.org/licenses/gpl.html

Build date: $(date '+%a, %d %b %Y %X %z')
"

# Check for and run the requested workflow
if has_binary WORKFLOW_$WORKFLOW; then
    Log "Running $WORKFLOW workflow"
    WORKFLOW_$WORKFLOW "${ARGS[@]}"
    Log "Finished running $WORKFLOW workflow"
else
    VERBOSE=1
    LogPrint "ERROR: The specified command '$WORKFLOW' does not exist !"
    EXIT_CODE=1
fi


exit $EXIT_CODE
